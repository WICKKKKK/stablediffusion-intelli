Trainer:
  accelerator: auto  # Supports passing different accelerator types ("cpu", "gpu", "tpu", "ipu", "hpu", "mps", "auto") as well as custom accelerator instances.; type: str | Accelerator
  strategy: auto # Supports different training strategies with aliases as well custom strategies. Default: ``"auto"``.; type: str | Strategy
  devices: auto # The devices to use. Can be set to a positive number (int or str), a sequence of device indices (list or str), the value ``-1`` to indicate all available devices should be used, or ``"auto"`` for automatic selection based on the chosen accelerator. Default: ``"auto"``.; type: List | str | int
  num_nodes: 1 # Number of GPU nodes for distributed training. Default: ``1``.; type: int
  precision: 32-true # Double precision (64, '64' or '64-true'), full precision (32, '32' or '32-true'), 16bit mixed precision (16, '16', '16-mixed') or bfloat16 mixed precision ('bf16', 'bf16-mixed'). Can be used on CPU, GPU, TPUs, HPUs or IPUs. Default: ``'32-true'``.; type: Literal | Literal | Literal | str
  logger: # Logger (or iterable collection of loggers) for experiment tracking. A ``True`` value uses the default ``TensorBoardLogger`` if it is installed, otherwise ``CSVLogger``. ``False`` will disable logging. If multiple loggers are provided, local files (checkpoints, profiler traces, etc.) are saved in the ``log_dir`` of he first logger. Default: ``True``.; type: Logger | Iterable | bool | NoneType
  callbacks: # Add a callback or list of callbacks. Default: ``None``.; type: List | Callback | NoneType
  fast_dev_run: false # Runs n if set to ``n`` (int) else 1 if set to ``True`` batch(es) of train, val and test to find any bugs (ie: a sort of unit test). Default: ``False``.; type: int | bool
  max_epochs: # Stop training once this number of epochs is reached. Disabled by default (None). If both max_epochs and max_steps are not specified, defaults to ``max_epochs = 1000``. To enable infinite training, set ``max_epochs = -1``.; type: int | NoneType
  min_epochs: # Force training for at least these many epochs. Disabled by default (None).; type: int | NoneType
  max_steps: -1 # Stop training after this number of steps. Disabled by default (-1). If ``max_steps = -1`` and ``max_epochs = None``, will default to ``max_epochs = 1000``. To enable infinite training, set ``max_epochs`` to ``-1``.; type: int
  min_steps: # Force training for at least these number of steps. Disabled by default (``None``).; type: int | NoneType
  max_time: # Stop training after this amount of time has passed. Disabled by default (``None``). The time duration can be specified in the format DD:HH:MM:SS (days, hours, minutes seconds), as a :class:`datetime.timedelta`, or a dictionary with keys that will be passed to :class:`datetime.timedelta`.; type: str | timedelta | Dict | NoneType
  limit_train_batches: # How much of training dataset to check (float = fraction, int = num_batches). Default: ``1.0``.; type: int | float | NoneType
  limit_val_batches: # How much of validation dataset to check (float = fraction, int = num_batches). Default: ``1.0``.; type: int | float | NoneType
  limit_test_batches: # How much of test dataset to check (float = fraction, int = num_batches). Default: ``1.0``.; type: int | float | NoneType
  limit_predict_batches: # How much of prediction dataset to check (float = fraction, int = num_batches). Default: ``1.0``.; type: int | float | NoneType
  overfit_batches: 0.0 # Overfit a fraction of training/validation data (float) or a set number of batches (int). Default: ``0.0``.; type: int | float
  val_check_interval: # How often to check the validation set. Pass a ``float`` in the range [0.0, 1.0] to check after a fraction of the training epoch. Pass an ``int`` to check after a fixed number of training batches. An ``int`` value can only be higher than the number of training batches when ``check_val_every_n_epoch=None``, which validates after every ``N`` training batches across epochs or during iteration-based training. Default: ``1.0``.; type: int | float | NoneType
  check_val_every_n_epoch: 1 # Perform a validation loop every after every `N` training epochs. If ``None``, validation will be done solely based on the number of training batches, requiring ``val_check_interval`` to be an integer value. Default: ``1``.; type: int | NoneType
  num_sanity_val_steps: # Sanity check runs n validation batches before starting the training routine. Set it to `-1` to run all batches in all validation dataloaders. Default: ``2``.; type: int | NoneType
  log_every_n_steps: # How often to log within steps. Default: ``50``.; type: int | NoneType
  enable_checkpointing: # If ``True``, enable checkpointing. It will configure a default ModelCheckpoint callback if there is no user-defined ModelCheckpoint in :paramref:`~pytorch_lightning.trainer.trainer.Trainer.callbacks`. Default: ``True``.; type: bool | NoneType
  enable_progress_bar: # Whether to enable to progress bar by default. Default: ``True``.; type: bool | NoneType
  enable_model_summary: # Whether to enable model summarization by default. Default: ``True``.; type: bool | NoneType
  accumulate_grad_batches: 2 # Accumulates gradients over k batches before stepping the optimizer. Default: 1.; type: int
  gradient_clip_val: # The value at which to clip gradients. Passing ``gradient_clip_val=None`` disables gradient clipping. If using Automatic Mixed Precision (AMP), the gradients will be unscaled before. Default: ``None``.; type: int | float | NoneType
  gradient_clip_algorithm: # The gradient clipping algorithm to use. Pass ``gradient_clip_algorithm="value"`` to clip by value, and ``gradient_clip_algorithm="norm"`` to clip by norm. By default it will be set to ``"norm"``.; type: str | NoneType
  deterministic: # If ``True``, sets whether PyTorch operations must use deterministic algorithms. Set to ``"warn"`` to use deterministic algorithms whenever possible, throwing warnings on operations that don't support deterministic mode (requires PyTorch 1.11+). If not set, defaults to ``False``. Default: ``None``.; type: bool | Literal | NoneType
  benchmark: true # The value (``True`` or ``False``) to set ``torch.backends.cudnn.benchmark`` to. The value for ``torch.backends.cudnn.benchmark`` set in the current session will be used (``False`` if not manually set). If :paramref:`~pytorch_lightning.trainer.trainer.Trainer.deterministic` is set to ``True``, this will default to ``False``. Override to manually set a different value. Default: ``None``.; type: bool | NoneType
  inference_mode: true # Whether to use :func:`torch.inference_mode` or :func:`torch.no_grad` during evaluation (``validate``/``test``/``predict``).; type: bool
  use_distributed_sampler: true # Whether to wrap the DataLoader's sampler with :class:`torch.utils.data.DistributedSampler`. If not specified this is toggled automatically for strategies that require it. By default, it will add ``shuffle=True`` for the train sampler and ``shuffle=False`` for validation/test/predict samplers. If you want to disable this logic, you can pass ``False`` and add your own distributed sampler in the dataloader hooks. If ``True`` and a distributed sampler was already added, Lightning will not replace the existing one. For iterable-style datasets, we don't do this automatically.; type: bool
  profiler: # To profile individual steps during training and assist in identifying bottlenecks. Default: ``None``.; type: Profiler | str | NoneType
  detect_anomaly: false # Enable anomaly detection for the autograd engine. Default: ``False``.; type: bool
  barebones: false # Whether to run in "barebones mode", where all features that may impact raw speed are disabled. This is meant for analyzing the Trainer overhead and is discouraged during regular training runs. The following features are deactivated: :paramref:`~pytorch_lightning.trainer.trainer.Trainer.enable_checkpointing`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.logger`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.enable_progress_bar`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.log_every_n_steps`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.enable_model_summary`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.num_sanity_val_steps`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.fast_dev_run`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.detect_anomaly`, :paramref:`~pytorch_lightning.trainer.trainer.Trainer.profiler`, :meth:`~pytorch_lightning.core.module.LightningModule.log`, :meth:`~pytorch_lightning.core.module.LightningModule.log_dict`.; type: bool
  plugins: # Plugins allow modification of core behavior like ddp and amp, and enable custom lightning plugins. Default: ``None``.; type: PrecisionPlugin | ClusterEnvironment | CheckpointIO | LayerSync | str | List | NoneType
  sync_batchnorm: false # Synchronize batch norm layers between process groups/whole world. Default: ``False``.; type: bool
  reload_dataloaders_every_n_epochs: 0 # Set to a non-negative integer to reload dataloaders every n epochs. Default: ``0``.; type: int
  default_root_dir: # Default path for logs and weights when no logger/ckpt_callback passed. Default: ``os.getcwd()``. Can be remote file paths such as `s3://mybucket/path` or 'hdfs://path/'; type: str | Path | NoneType
name: ''  # postfix for logdir; type: str
resume: '' # resume from logdir or checkpoint in logdir; type: str
train: true # train; type: bool
no_test: false # disable test; type: bool
project: '' # name of new or path to existing project; type: str
debug: false # enable post-mortem debugging; type: bool
seed: 23 # seed for seed_everything; type: int
postfix: '' # post-postfix for default name; type: str
logdir: logs # directory for logging dat shit; type: str
scale_lr: true # scale base-lr by ngpu * batch_size * n_accumulate; type: bool
model:
  base_learning_rate: 4.5e-6
  target: ldm.models.autoencoder.AutoencoderKL
  params:
    monitor: "val/rec_loss"
    embed_dim: 3
    lossconfig:
      target: ldm.modules.losses.LPIPSWithDiscriminator
      params:
        disc_start: 50001
        kl_weight: 0.000001
        disc_weight: 0.5
    ddconfig:
      double_z: true
      z_channels: 3
      resolution: 256
      in_channels: 3
      out_ch: 3
      ch: 128
      ch_mult: [1, 2, 4]  # num_down = len(ch_mult)-1
      num_res_blocks: 2
      attn_resolutions: []
      dropout: 0.0
data:
  target: ldm.data.datamodule.DataModuleFromConfig
  params:
    batch_size: 1
    wrap: true
    train:
      target: ldm.data.imagenet.ImageNetSRTrain
      params:
        size: 256
        degradation: pil_nearest
    validation:
      target: ldm.data.imagenet.ImageNetSRValidation
      params:
        size: 256
        degradation: pil_nearest
lightning:
  callbacks:
    image_logger:
      target: ldm.callbacks.ImageLogger
      params:
        batch_frequency: 1000
        max_images: 8
        increase_log_steps: true
